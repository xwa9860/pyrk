''' changed from the initial input file
to represent a simplified model for the FHR core
'''
from ur import units
import th_component as th
import math
from flibe import Flibe
from graphite import Graphite
from kernel import Kernel
from timer import Timer

#############################################
#
# User Workspace
#
#############################################

# Thermal hydraulic params
# Temperature feedbacks of reactivity
alpha_f = -3.8*units.pcm/units.kelvin
alpha_c = -1.8*units.pcm/units.kelvin
alpha_m = -0.7*units.pcm/units.kelvin
alpha_r = 1.8*units.pcm/units.kelvin
# below from steady state analysis
t_mod = 986.511*units.kelvin
t_fuel = 963.8713*units.kelvin
t_shell = 951.2938*units.kelvin 
t_cool = 922.7725*units.kelvin

# Initial time
t0 = 0.00*units.seconds

# Timestep
dt = 0.001*units.seconds

# Final Time
tf = 5.0*units.seconds


def area_sphere(r):
    assert(r >= 0*units.meter)
    return (4.0)*math.pi*pow(r.to('meter'), 2)


def vol_sphere(r):
    assert(r >= 0*units.meter)
    return (4./3.)*math.pi*pow(r.to('meter'), 3)

# volumes
n_pebbles = 470000
n_graph_peb = 218000
n_particles_per_pebble = 4730
r_pebble = 0.015*units.meter  # [m] diam = 3cm
r_ldg = 0.0125*units.meter  # [m] diam = 2.5cm
r_particle = 200*units.micrometer
r_mod = 1.25*units.centimeter
r_fuel = 1.4*units.centimeter
r_shell = 1.5*units.centimeter

# vol of 4730 kernels per pebble, each 400 micrometer diameter
vol_fuel = n_pebbles*n_particles_per_pebble*vol_sphere(r_particle)
vol_ldg = (n_pebbles)*(vol_sphere(r_ldg))
vol_mod = (n_pebbles)*(vol_sphere(r_pebble) - vol_sphere(r_ldg)) - vol_fuel
vol_graph_peb = (n_graph_peb)*(vol_sphere(r_pebble))
L_mod = r_mod
L_fuel = r_fuel-r_mod
L_shell = r_shell-r_fuel
# from design report
vol_cool = 7.20*units.meter**3
mass_inner_refl = 43310.0*units.kg
mass_outer_refl = 5940.0*units.kg
mass_refl = mass_inner_refl + mass_outer_refl
rho_refl = 1740.0*units.kg/units.meter**3
vol_refl = mass_refl/rho_refl

a_ldg = area_sphere(r_ldg)*n_pebbles
a_mod = area_sphere(r_pebble)*n_pebbles
a_graph_peb = area_sphere(r_pebble)*n_graph_peb
a_fuel = area_sphere(r_particle)*n_pebbles*n_particles_per_pebble
a_refl = 2*math.pi*core_outer_radius*core_height

h_cool = 4700*units.watt/units.kelvin/units.meter**2  # TODO implement h(T) model

## Calculate h using wakao correlation
#m_flow = 976*units.kg/units.seconds
#mu_coolant=@(Tc) 4.638E5/Tc^2.79;%pa.s, Tc in celsius
#mu_cool = mu_coolant(Y(i0+4)-273.15);
#Pr = cp(4)*mu_cool/k(4);
#epsilon = 0.6; %packing fraction
#A_flow = pi*(1.25^2 - 0.35^2);%whole core
#T_in = 600+273.15;
#T_out = 2*Y(i0+4)-T_in;
#Re = m_flow*diam_pb/mu_cool/A_flow;
#Nu = 2+1.1*Pr^(1/3)*Re^0.6;
#h=k(4)*Nu/diam_pb;

t_inlet = units.Quantity(600.0, units.degC)  # degrees C

#############################################
#
# Required Input
#
#############################################

# Total power, Watts, thermal
power_tot = 236000000.0*units.watt

# Timer instance, based on t0, tf, dt
ti = Timer(t0=t0, tf=tf, dt=dt)

# Number of precursor groups
n_pg = 6

# Number of decay heat groups
n_dg = 0

# Fissioning Isotope
fission_iso = "u235"

# Spectrum
spectrum = "thermal"

# Feedbacks, False to turn reactivity feedback off. True otherwise.
feedback = True

# External Reactivity
from reactivity_insertion import ImpulseReactivityInsertion
rho_ext = ImpulseReactivityInsertion(timer=ti,
                                     t_start=1.0*units.seconds,
                                     t_end=2.0*units.seconds,
                                     rho_init=0.0*units.delta_k,
                                     rho_max=0.001*units.delta_k)

# maximum number of internal steps that the ode solver will take
nsteps = 10000


mod = th.THComponent(name="mod",
                     mat=Graphite(name="pebgraphite"),
                     vol=vol_mod,
                     T0=t_mod,
                     alpha_temp=alpha_mod,
                     timer=ti)

fuel = th.THComponent(name="fuel",
                      mat=Kernel(name="fuelkernel"),
                      vol=vol_fuel,
                      T0=t_fuel,
                      alpha_temp=alpha_f,
                      timer=ti,
                      heatgen=True,
                      power_tot=power_tot)

shell = th.THComponent(name="shell",
                     mat=Graphite(name="pebgraphite"),
                     vol=vol_shell,
                     T0=t_shell,
                     alpha_temp=alpha_shell,
                     timer=ti)

cool = th.THComponent(name="cool",
                      mat=Flibe(name="flibe"),
                      vol=vol_cool,
                      T0=t_cool,
                      alpha_temp=alpha_c,
                      timer=ti)

components = [mod, fuel, shell, cool]

# The moderator graphite conducts to the fuel
mod.add_conduction('fuel', area=a_mod, L=L_mod)

# The fuel conducts to the shell and moderator kernel
fuel.add_conduction('shell', area=a_fuel, L=L_fuel)
fuel.add_conduction('mod', area=a_fuel, L=L_fuel)

# The shell conducts to the fuel
shell.add_conduction('mod', area=a_fuel, L=L_fuel)
# The shell convects to the coolant
shell.add_convection('cool', h=h_cool, area=a_shell)

# The coolant convects to the shell
cool.add_convection('graph_peb', h=h_mod, area=a_graph_peb)

